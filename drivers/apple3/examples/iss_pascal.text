program isstracker; { Apple /// Fujinet ISS Tracker }{Note: this needs the sosio library to be available}uses applestuff, pgraf, sosio;const on = true;      off = false;      url1 = 'N:HTTP://api.open-notify.org/iss-now.json';      qlong = '/iss_position/longitude';      qlat = '/iss_position/latitude';      xmax = 140; { screen x maximum }      ymax = 160; { screen y maximum }      yoffset = 32; { map offset from bottom }var backgnd: array [0..7, 0..7] of screencolor;    satimage: packed array[0..7, 0..7] of boolean;    x, y, x1, y1, xold, yold, col, delay: integer;    devname: string;    devnumb, refnumb, retcode, ctrlcode: integer;    ctrllist: string;    fixed: string;    year, mon, day, dayofwk, hour, minutes, sec, thou: integer;    gscreen: interactive;    err: boolean;    mode, trans, null: string;    sysbuf, bytesread: integer;    urllength, qlength: string;    longitude, latitude: real;    url, longquery, latquery, result, month: string;    readbuf : packed array [1..50] of 0..255;procedure printinfo;  begin    pencolor(white);    fillcolor(black);    xfroption(0);    moveto(0,32);    writeln(gscreen,' ** iss position ** ');    moveto(0,24);    writeln(gscreen,'longitude latitude  ');    moveto(0,16);    writeln(gscreen,longitude:8:4);    moveto(70,16);    writeln(gscreen,latitude:8:4);    moveto(0,8);    case mon of      1: month := 'JAN';      2: month := 'FEB';      3: month := 'MAR';      4: month := 'APR';      5: month := 'MAY';      6: month := 'JUN';      7: month := 'JUL';      8: month := 'AUG';      9: month := 'SEP';     10: month := 'OCT';     11: month := 'NOV';     12: month := 'DEC'    end;    writeln(gscreen,' ',hour:2,':',minutes:2,'  ',day:2,' ',month,' 20',year-1900) {hack in the year 2000..}  end;{ convert the readbuffer to a string, length of string = bytesread  } procedure buftostr (bytesread:integer);  var i: integer;      char: string;  begin    result := '';    for i := 1 to bytesread do    begin      char := ' ';  { this is my hack to convert a char value to a string }      char[1] := chr(readbuf[i]);      result := concat(result,char)    end;  end;{ open network dev and get iss position }{  no error checking at the moment.. :-( }procedure getisspos;  begin    DevName := '.NETWORK';    { get SOS device number for network device }    err := SOS_Get_D_Num(DevName, devnumb, retcode );    { SOS open network device }    sysbuf := 0;    err := SOS_Open( DevName, 0, 0, sysbuf, refnumb, retcode );    { Fujinet open network device }    ctrlcode := ord('O');    mode :=' ';    mode[1] := chr(12); { Read and Write }    trans := ' ';    trans[1] := chr(128);    urllength := ' ';    urllength[1] := chr(length(url));    ctrllist := concat(mode, trans, url, urllength);    err := sos_d_control(devnumb, ctrlcode, ctrllist, retcode);    { Set channel mode json }    ctrlcode := 252;    ctrllist := ' ';    ctrllist[1] := chr(1);    err := sos_d_control(devnumb, ctrlcode, ctrllist, retcode);    { Parse the JSON }    ctrlcode := ord('P');    ctrllist := ''; {empty control list}    err := sos_d_control(devnumb, ctrlcode, ctrllist, retcode);    { Query for Longitude }    ctrlcode := ord('Q');    qlength := ' ';    qlength[1] := chr(length(longquery));    ctrllist := concat(longquery, qlength);    err := sos_d_control( devnumb, ctrlcode, ctrllist, retcode );    { read the Longitude result }    err := sos_s_read(refnumb, readbuf, 0, 20, bytesread, retcode);    { and covert to a real number }    buftostr(bytesread); {convert the readbuf to string result}    delete(result, pos('.', result), 1); {remove the decimal point from the result for strtonum}    longitude := strtonum(result, -4); {assume always 4 decimal places}     { Query for Latitude }     ctrlcode := ord('Q');    qlength[1] := chr(length(latquery));    ctrllist := concat(latquery, qlength);    err := sos_d_control( devnumb, ctrlcode, ctrllist, retcode );    { read the Latitude result }    err := sos_read(refnumb, readbuf, 20, bytesread, retcode);    { and covert to a real number }    buftostr(bytesread); {convert the readbuf to string result}    delete(result, pos('.', result), 1); {remove the decimal point from the result for strtonum}    latitude := strtonum(result, -4); {assume always 4 decimal places}    {close network device}    err := sos_close(refnumb, retcode);    { calc the x & y screen position from the long/lat }    x := round((xmax/360) * (longitude + 180) - 4);    y := round((ymax/180) * (latitude + 90) + yoffset + 4);  end;procedure savebackground;  begin    for y1 := 0 to 7 do    begin      for x1 := 0 to 7 do      begin        moveto(x + x1, y + y1 - 7);        col := xycolor;        { need a better way to do this }        if col = 15 then backgnd[x1,y1] := white        else if col = 2 then backgnd[x1,y1] := darkblue        else if col = 4 then backgnd[x1,y1] := darkgreen        else if col = 0 then backgnd[x1,y1] := black        else backgnd[x1,y1] := black;      end;    end;  end;procedure restorebackground;  begin  xfroption(0);    for y1 := 0 to 7 do    begin      for x1 := 0 to 7 do      begin        pencolor(backgnd[x1,y1]);        dotat(xold + x1, yold + y1 - 7)      end;    end;  end;procedure drawsat;  begin    pencolor(white);    fillcolor(black);    xfroption(1);    moveto(x,y);    drawimage(satimage,2,0,0,8,8);    xold := x;    yold := y  end;procedure initsat;{ 00100000 }{ 01010000 }{ 10100100 }{ 01011000 }{ 00011010 }{ 00000101 }{ 00001010 }{ 00000100 }  var row, col: integer;  begin    for row := 0 to 7 do      begin        for col := 0 to 7 do satimage[row,col] := off;      end;    satimage[0,2] := on;    satimage[1,1] := on;    satimage[1,3] := on;    satimage[2,0] := on;    satimage[2,2] := on;    satimage[2,5] := on;    satimage[3,1] := on;    satimage[3,3] := on;    satimage[3,4] := on;    satimage[4,3] := on;    satimage[4,4] := on;    satimage[4,6] := on;    satimage[5,5] := on;    satimage[5,7] := on;    satimage[6,4] := on;    satimage[6,6] := on;    satimage[7,5] := on  end;{ main loop }begin  { add null terminator to strings }  null := ' ';  { set string to one character length }  null[1] := chr(0); { set that char to a null }  url := concat(url1,null);  longquery := concat(qlong,null);  latquery := concat(qlat,null);  initgrafix;  grafixmode(col140,1);  gload('a3map3');  grafixon;  rewrite(gscreen, 'graphic:');  initsat;  getisspos; { get first position }  xold := x;  yold := y;  savebackground;  drawsat;  repeat    getisspos;    clockinfo(year, mon, day, dayofwk, hour, minutes, sec, thou);    printinfo;    restorebackground;    savebackground;    drawsat;    for delay := 0 to 5000 do      begin        {delay some}      end;    until keypress;end.