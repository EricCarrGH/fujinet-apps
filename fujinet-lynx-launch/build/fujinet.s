;
; File generated by cc65 v 2.19 - Git dcdf7ade0
;
	.fopt		compiler,"cc65 v 2.19 - Git dcdf7ade0"
	.setcpu		"65SC02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_lynx_comlynx_ser
	.import		_ser_install
	.import		_ser_open
	.import		_ser_close
	.import		_ser_get
	.import		_ser_put
	.import		_malloc
	.import		_free
	.import		_memcpy
	.export		_tmp
	.export		_fujinet_init
	.export		_fujinet_done
	.export		_fujinet_send
	.export		_fujinet_cts
	.export		_fujinet_recv

.segment	"BSS"

_tmp:
	.res	8,$00

; ---------------------------------------------------------------
; unsigned char __near__ fujinet_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fujinet_init: near

.segment	"CODE"

	ldy     #$04
L0002:	lda     M0002,y
	sta     M0001,y
	dey
	bpl     L0002
	lda     #<(_lynx_comlynx_ser)
	ldx     #>(_lynx_comlynx_ser)
	jsr     _ser_install
	cli
	lda     #<(M0001)
	ldx     #>(M0001)
	jmp     _ser_open

.segment	"RODATA"

M0002:
	.byte	$15
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00

.segment	"BSS"

M0001:
	.res	5,$00

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ fujinet_done (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fujinet_done: near

.segment	"CODE"

	jmp     _ser_close

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ _checksum (unsigned char *b, unsigned short len)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__checksum: near

.segment	"CODE"

	stz     M0001
	stz     M0002
	stz     M0002+1
L0002:	lda     M0002
	cmp     (sp)
	lda     M0002+1
	ldy     #$01
	sbc     (sp),y
	bcs     L0003
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     M0002
	sta     ptr1
	txa
	adc     M0002+1
	sta     ptr1+1
	lda     (ptr1)
	eor     M0001
	sta     M0001
	inc     M0002
	bne     L0002
	inc     M0002+1
	bra     L0002
L0003:	ldx     #$00
	lda     M0001
	jmp     incsp4

.segment	"BSS"

M0001:
	.res	1,$00
M0002:
	.res	2,$00

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ fujinet_send (unsigned char dev, char *buf, unsigned short len)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fujinet_send: near

.segment	"CODE"

	jsr     ldax0sp
	jsr     incax4
	jsr     _malloc
	sta     M0001
	stx     M0001+1
	stz     M0002
	stz     M0002+1
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$04
	lda     (sp),y
	ora     #$60
	sta     (ptr1)
	lda     M0001
	ldx     M0001+1
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     (sp)
	sta     (ptr1)
	lda     M0001
	ldx     M0001+1
	ina
	bne     L0002
	inx
L0002:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	sta     (ptr1)
	lda     M0001
	ldx     M0001+1
	jsr     incax3
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _memcpy
	jsr     ldax0sp
	jsr     incax4
	clc
	adc     M0001
	pha
	txa
	adc     M0001+1
	tax
	pla
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	jsr     __checksum
	ldy     #$00
	jsr     staspidx
	stz     M0002
	stz     M0002+1
L0003:	lda     M0002
	ldx     M0002+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     incax4
	jsr     tosicmp
	bcs     L0004
	lda     M0001
	clc
	adc     M0002
	sta     ptr1
	lda     M0001+1
	adc     M0002+1
	sta     ptr1+1
	lda     (ptr1)
	jsr     _ser_put
	inc     M0002
	bne     L0003
	inc     M0002+1
	bra     L0003
L0004:	lda     M0001
	ldx     M0001+1
	jsr     _free
	stz     M0002
	stz     M0002+1
L0008:	lda     M0002
	ldx     M0002+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     incax4
	jsr     tosicmp
	bcs     L0010
L000D:	lda     #<(M0003)
	ldx     #>(M0003)
	jsr     _ser_get
	cmp     #$06
	beq     L000D
	inc     M0002
	bne     L0008
	inc     M0002+1
	bra     L0008
L0010:	lda     #<(M0003)
	ldx     #>(M0003)
	jsr     _ser_get
	cmp     #$06
	beq     L0010
	ldx     #$00
	lda     M0003
	jmp     incsp5

.segment	"BSS"

M0001:
	.res	2,$00
M0002:
	.res	2,$00
M0003:
	.res	1,$00

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ fujinet_cts (unsigned char dev)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fujinet_cts: near

.segment	"CODE"

	lda     (sp)
	ora     #$30
	sta     M0001
	jsr     _ser_put
L0002:	lda     #<(M0002)
	ldx     #>(M0002)
	jsr     _ser_get
	cmp     #$06
	beq     L0002
L0005:	lda     #<(M0002)
	ldx     #>(M0002)
	jsr     _ser_get
	cmp     #$06
	beq     L0005
	ldx     #$00
	lda     M0002
	jmp     incsp1

.segment	"BSS"

M0001:
	.res	1,$00
M0002:
	.res	1,$00

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ fujinet_recv (unsigned char dev, unsigned char *buf, unsigned short *len)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fujinet_recv: near

.segment	"CODE"

	ldy     #$04
	lda     (sp),y
	ora     #$40
	sta     M0001
	lda     (sp),y
	ora     #$90
	sta     M0002
	lda     (sp),y
	ora     #$B0
	sta     M0003
	lda     (sp),y
	ora     #$C0
	sta     M0004
	lda     M0001
	jsr     _ser_put
L0002:	lda     #<(M0005)
	ldx     #>(M0005)
	jsr     _ser_get
	cmp     #$06
	beq     L0002
L0005:	lda     #<(M0005)
	ldx     #>(M0005)
	jsr     _ser_get
	cmp     #$06
	beq     L0005
	lda     M0005
	cmp     M0004
	jeq     L001E
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	jsr     _fujinet_cts
	cpx     #$00
	jne     L0009
	cmp     M0003
	jne     L0009
L000A:	lda     #<(M0005)
	ldx     #>(M0005)
	jsr     _ser_get
	cmp     #$06
	beq     L000A
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	lda     M0005
	sta     (ptr1),y
L000D:	lda     #<(M0005)
	ldx     #>(M0005)
	jsr     _ser_get
	cmp     #$06
	beq     L000D
	jsr     ldax0sp
	sta     sreg
	stx     sreg+1
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     M0005
	ora     ptr1
	sta     (sreg)
	ldy     #$01
	lda     ptr1+1
	sta     (sreg),y
	stz     M0006
	stz     M0006+1
L0010:	lda     M0006
	ldx     M0006+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	jsr     tosicmp
	bcs     L0018
L0015:	lda     #<(M0005)
	ldx     #>(M0005)
	jsr     _ser_get
	cmp     #$06
	beq     L0015
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     M0006
	sta     ptr1
	txa
	adc     M0006+1
	sta     ptr1+1
	lda     M0005
	sta     (ptr1)
	inc     M0006
	bne     L0010
	inc     M0006+1
	bra     L0010
L0018:	lda     #<(M0005)
	ldx     #>(M0005)
	jsr     _ser_get
	cmp     #$06
	beq     L0018
	ldy     #$04
	lda     (sp),y
	ora     #$20
	jsr     _ser_put
L001B:	lda     #<(M0005)
	ldx     #>(M0005)
	jsr     _ser_get
	cmp     #$06
	beq     L001B
	bra     L001E
L0009:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
L001E:	ldx     #$00
	lda     M0005
	jmp     incsp5

.segment	"BSS"

M0001:
	.res	1,$00
M0002:
	.res	1,$00
M0003:
	.res	1,$00
M0004:
	.res	1,$00
M0005:
	.res	1,$00
M0006:
	.res	2,$00

.endproc

